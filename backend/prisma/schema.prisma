generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Your existing schema models go here

enum UserType {
  SCHOOL
  RANDOM
  ADMIN
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  password         String
  name             String
  userType         UserType
  isPaid           Boolean        @default(true)
  firebaseUid      String?        
  profilePicture   String?        
  hasCustomPassword Boolean       @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  posts            Post[]
  replies          Reply[]
  videoProgress    Progress[]
  adminPosts       AdminPost[]
  adminReplies     AdminReply[]
}

model Video {
  id        String   @id @default(uuid())
  title     String
  description String
  url       String
  order     Int      @unique
  encoded   Boolean  @default(false)
  hlsUrls   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id])
  progress  Progress[]
  pdfs      PDF[]
}

model PDF {
  id          String   @id @default(uuid())
  title       String
  description String?
  url         String
  videoId     String
  video       Video    @relation(fields: [videoId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Module {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int      @default(0) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  videos      Video[]
}

model Progress {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}

model Post {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  replies   Reply[]
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Payment {
  id                 String   @id @default(uuid())
  razorpay_order_id  String
  razorpay_payment_id String
  razorpay_signature String
  createdAt          DateTime @default(now())
}

model Otp {
  email     String   @id
  otp       String
  expiresAt DateTime
  name      String
  password  String
  createdAt DateTime @default(now())
}

model AdminPost {
  id        String      @id @default(uuid())
  content   String
  imageUrl  String?
  userId    String
  priority  Int         @default(10)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  replies   AdminReply[]
}

model AdminReply {
  id          String    @id @default(uuid())
  content     String
  imageUrl    String?
  userId      String
  adminPostId String
  priority    Int       @default(10)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  adminPost   AdminPost @relation(fields: [adminPostId], references: [id])
}



