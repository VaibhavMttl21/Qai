generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  SCHOOL
  RANDOM
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  name          String
  userType      UserType
  isPaid        Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  posts         Post[]
  replies       Reply[]
  videoProgress Progress[]
}

model Video {
  id          String     @id @default(uuid())
  title       String
  description String
  url         String
  order       Int        @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  progress    Progress[]
}

model Progress {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}

model Post {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  replies   Reply[]
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Payment {
  id                 String   @id @default(uuid())
  razorpay_order_id  String
  razorpay_payment_id String
  razorpay_signature String
  createdAt          DateTime @default(now())
}


